gt :: (Integer, Integer -> Boolean)
eq :: (Integer, Integer -> Boolean)
add :: (Integer, Integer -> Integer)
f :: (Integer, Integer, Integer, Integer -> Integer)
f = \(max :: Integer, acc :: Integer, prev :: Integer, cur :: Integer) -> Integer {
    if gt(cur, max) ret acc
    else ret Integer {
        next :: Integer
        next = add(prev, cur)
        if eq(mod(next, 2), 0) ret f(max, add(next, acc), cur, next)
        else ret f(max, acc, cur, next)
    }
}
print(f(4000000, 0, 0, 1))
