succ :: (Integer -> Integer)
eq :: (Integer, Integer -> Boolean)
isPrime :: (Integer -> Boolean)
isPrime = \(p :: Integer) -> Boolean {
    isPrimeInner :: (Integer, Integer -> Boolean)
    isPrimeInner = \(n :: Integer, i :: Integer) -> Boolean {
        if eq(n, i) ret True
        else if eq(mod(n, i), 0) ret False
        else ret isPrimeInner(n, succ(i))
    }
    ret isPrimeInner(p, 2)
}
f :: (Integer, Integer -> Void)
f = \(n :: Integer, i :: Integer) -> Void {
    if eq(n, i) ret Nothing
    else if isPrime(i) if eq(mod(n, i), 0) Void {
        print(i)
        ret f(n, succ(i))
    }
    ret f(n, succ(i))
}
f(600851475143, 2)
